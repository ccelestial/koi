// layout /////////////////////////////////////////////////////////////////////

@mixin css-as( $type ) {
  @if contains( border-box content-box, $type ) {
    @include css-as-sizing( $type );
  }
  @if layout == $type  {
    @include css-as-layout;
  }
  @if clear == $type  {
    @include css-as-clear;
  }
}

@mixin css-as-layout {
  min-height: 0;
}

@mixin css-as-sizing( $type ) {
  -webkit-box-sizing: $type;
  -khtml-box-sizing: $type;
  -moz-box-sizing: $type;
  -ms-box-sizing: $type;
  box-sizing: $type;
  behavior: url( "/assets/lib/shim/box-sizing.htc" );
}

@mixin css-as-clear {
  &:before, &:after { content:""; height:0; display:table; }
  &:after { clear:both; }
  *zoom: 1;
}

@mixin css-display( $type ) {
  @if $type == hidden {
    display: none;
  }
  @else if $type == inline-block {
    display: -moz-inline-stack;
    display: inline-block;
    zoom: 1;
    *display: inline;
  }
  @else {
    display: $type;
  }
}

@mixin css-overflow( $type ) {
  overflow: $type;
}

@mixin css-visibility( $type ) {
  visibility: $type;
}


@mixin css-z-index( $i ) {
  z-index: $i;
}

// position ///////////////////////////////////////////////////////////////////

@mixin css-position( $type ) {
  position: $type;
}

@mixin css-inset( $side, $amount ) {
  #{ $side }: $amount;
}

@mixin css-outset( $side, $amount ) {
  #{ $side }: -$amount;
}

@mixin css-float( $dir ) {
  float: $dir;
}

@mixin css-clear( $dir:both ) {
  clear: $dir;
}

@mixin css-push( $dir, $amount ) {
  #{ side-in-opposite-direction($dir) }: $amount;
}

@mixin css-pull( $dir, $amount ) {
  #{ side-in-direction($dir) }: -$amount;
}

@mixin css-space( $side, $amount ) {
  margin-#{ $side }: $amount;
}

@mixin css-backspace( $side, $amount ) {
  margin-#{ $side }: -$amount;
}

@mixin css-pad( $side, $amount ) {
  padding-#{ $side }: $amount;
}

@mixin css-align( $align ) {
  vertical-align: $align;
}

// dimension //////////////////////////////////////////////////////////////////

@mixin css-box( $dimension, $amount ) {
  #{ $dimension }: $amount;
}

@mixin css-min( $dimension, $amount ) {
  min-#{ $dimension }: $amount;
}

@mixin css-line( $dimension, $amount ) {
  line-#{ $dimension }: $amount;
}

// type ///////////////////////////////////////////////////////////////////////

@mixin css-text( $key, $val ) {
  @if color == $key {
    color: $val;
  }
  @else if contains( size style weight, $key ) {
    font-#{ $key }: $val;
  }
  @else {
    text-#{ $key }: $val;
  }
}

// effects ////////////////////////////////////////////////////////////////////

@mixin css-background( $key, $val ) {
  background-#{ $key }: $val;
}

@mixin css-opacity( $amount ) {
  // IE =< 7 hasLayout only
	min-height: 0;

	// IE >= 8
	-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=#{ $amount * 100 })";

  // IE >= 8
	filter: alpha(opacity=#{ $amount * 100 });

  // Firefox < 0.9
	-moz-opacity: $amount;

	// Safari 1.x
	-khtml-opacity: $amount;

  // W3C
	opacity: $amount;
}

@mixin css-border( $key, $side, $val ) {
  border-#{ $side }-#{ $key }: $val;
}

@mixin css-round( $corner, $amount ) {
  @if $corner == all { @include -css-round( $amount $amount $amount $amount ); }
  @else if $corner == top { @include -css-round( $amount $amount 0 0 ); }
  @else if $corner == left { @include -css-round( $amount 0 0 $amount ); }
  @else if $corner == right { @include -css-round( 0 $amount $amount 0 ); }
  @else if $corner == bottom { @include -css-round( 0 0 $amount $amount ); }
  @else if $corner == top-left { @include -css-round( $amount 0 0 0 ); }
  @else if $corner == top-right { @include -css-round( 0 $amount 0 0 ); }
  @else if $corner == bottom-left { @include -css-round( 0 0 0 $amount ); }
  @else if $corner == bottom-right { @include -css-round( 0 0 $amount 0 ); }
}

@mixin -css-round( $vector ) {
  -moz-border-radius: $vector;
  -webkit-border-radius: $vector;
  border-radius: $vector;
  behavior: url( /assets/lib/shim/pie.htc );
}

@mixin css-box-shadow( $x:0, $y:0, $blur:0, $spread:0, $clr:rgba(0, 0, 0, 0), $inset:() ) {
  @if is-value( $inset ) and $inset { $inset: inset; }

  -moz-box-shadow: $inset $x $y $blur $spread $clr;
  -webkit-box-shadow: $inset $x $y $blur $spread $clr;
  box-shadow: $inset $x $y $blur $spread $clr;
}

@mixin css-cursor( $type ) {
  cursor: $type;
}

@mixin css-transition( $properties:all, $time:200ms, $timing:ease-out, $suffix:"" )
{
  -webkit-transition-property: $properties;
  -moz-transition-property: $properties;
  -ms-transition-property: $properties;
  -o-transition-property: $properties;
  transition-property: $properties;

  -webkit-transition-duration: $time;
  -moz-transition-duration: $time;
  -ms-transition-duration: $time;
  -o-transition-duration: $time;
  transition-duration: $time;

  -webkit-transition-timing-function: $timing;
  -moz-transition-timing-function: $timing;
  -ms-transition-timing-function: $timing;
  -o-transition-timing-function: $timing;
  transition-timing-function: $timing;
}
