// value checking //////////////////////////////////////////////////////////////////

/* `is-value` returns `true` if the `$val` is not blank, `false` otherise */
@function is-value( $val ) {
  @return not-empty( $val );
}

/* `is-blank` returns `true` if the `$val` is `""` or `()`, `false` otherise */
@function is-blank( $val ) {
  @if is-string( $val ) { @return $val == ""; }
  @return false;
}

@function not-blank( $val ) {
  @return not is-blank( $val );
}

@function is-zero( $val ) {
  @if is-number( $val ) { @return $val == 0; }
  @if is-string( $val ) { @return $val == ""; }
  @if is-list( $val ) { @return length( $val ) == 0; }
  @return false;
}

@function not-zero( $val ) {
  @return not is-zero( $val );
}

@function is-empty( $val ) {
  @if is-list( $val ) { @return length($val) == 0; }
  @return false;
}

@function not-empty( $val ) {
  @return not is-empty( $val );
}

@function is-decimal( $val ){
  @return fractional( $val * 10 ) < 0.001;
}

// unit checking //////////////////////////////////////////////////////////////////

@function is-unitless( $val ) {
  @return unitless( $val );
}

@function is-col( $val ) {
  @if not is-number( $val ) { @return false; }
  @return unit( $val ) == col;
}

@function is-u( $val ) {
  @if not is-number( $val ) { @return false; }
  @return unit( $val ) == u;
}

@function is-px( $val ) {
  @if not is-number( $val ) { @return false; }
  @return unit( $val ) == px;
}

@function is-em( $val ) {
  @if not is-number( $val ) { @return false; }
  @return unit( $val ) == em;
}

@function is-ex( $val ) {
  @if not is-number( $val ) { @return false; }
  @return unit( $val ) == ex;
}

@function is-percent( $val ) {
  @if not is-number( $val ) { @return false; }
  @return $unit == "%";
}

// type checking //////////////////////////////////////////////////////////////////

@function is-common-value( $val ) {
  @return contains( $common-values, $val );
}

@function is-number( $val ) {
  @return type-of( $val ) == number;
}

@function is-string( $val ) {
  @return type-of( $val ) == string;
}

@function is-color( $val ) {
  @return type-of( $val ) == color;
}

@function is-boolean( $val ) {
  @return type-of( $val ) == bool;
}

@function is-list( $val ) {
  @return type-of( $val ) == list;
}

@function is-side( $side ) {
  @return contains( $sides, $side );
}

@function is-corner( $corner ) {
  @return contains( $corners, $corner );
}

@function is-direction( $direction ) {
  @return contains( $directions, $direction );
}

@function is-vertical-side( $side ) {
  @return contains( $vertical-sides, $side );
}

@function is-horizontal-side( $side ) {
  @return contains( $horizontal-sides, $side );
}

@function is-text-alignment( $alignment ) {
  @return contains( $text-alignments, $alignment );
}

@function is-vertical-alignment( $alignment ) {
  @return contains( $vertical-alignments, $alignment );
}

@function is-side-argument( $arg ) {
  @return contains( $side-arguments, $arg );
}

@function is-corner-argument( $arg ) {
  @return contains( $corner-arguments, $arg );
}

@function is-direction-argument( $arg ) {
  @return contains( $direction-arguments, $arg );
}

@function is-alignment-argument( $arg ) {
  @return contains( $alignment-arguments, $arg );
}

/* look-up *******************************************************************/

@function screen-vector( $dir ) {
  @return find-second-by-first( $screen-vector, $dir );
}

@function hex-character( $i ) {
  @if $i < 10 { @return "" + $i; }
  @return nth( $alphabet, $i - 9 );
}

@function color-name( $col ) {
  @return find-second-by-first( $color-names, $col );
}

@function abbreviate( $string ) {
  @return either( find-second-by-first($abbreviations, $string), $string );
}

@function unabbreviate( $string ) {
  @return either( find-first-by-second($abbreviations, $string), $string );
}

@function opposite-side( $side ) {
  @return find-opposite( $opposite-sides, $side );
}

@function opposite-corner( $corner ) {
  @return find-opposite( $opposite-corners, $corner );
}

@function opposite-direction( $direction ) {
  @return find-opposite( $opposite-directions, $direction );
}

@function direction-of-side( $side ) {
  @return find-second-by-first( $side-directions, $side );
}

@function opposite-direction-of-side( $side ) {
  @return opposite-direction( direction-of-side( $side ) );
}

@function side-in-direction( $direction ) {
  @return find-first-by-second( $side-directions, $direction );
}

@function side-in-opposite-direction( $direction ) {
  @return side-in-direction( opposite-direction( $direction ) );
}

@function moz-corner( $corner ) {
  @return find-second-by-first( $moz-corners, $corner );
}

// value operations //////////////////////////////////////////////////////////////////

@function either( $first, $second ) {
  @return find-value( $first $second );
}

/* `plus` returns `$x` added or concatenated to `$y` */
@function minus( $x, $y ) {
  @if is-col( $x ) { @return minus-col( $x, $y ); }
  @return $x + $y;
}

@function minus-col( $x, $y ) {
  $col-x: integral( $x ); $u-x: guttural( $x );
  $col-y: integral( $y ); $u-y: guttural( $y );
  $px: to-px-from-col( $col-x ) - to-px-from-col( $col-y );
  @if ( $col-x > 0 and $col-y > 0 and $col-x != $col-y ) { $px: $px - 10px; }
  @return to-col-from-px( $px + to-px-from-u($u-x) - to-px-from-u($u-y) );
}

/* `plus` returns `$x` added or concatenated to `$y` */
@function plus( $x, $y ) {
  @if is-list( $x ) { @return join( $x, $y ); }
  @if is-col( $x ) { @return plus-col( $x, $y ); }
  @return $x + $y;
}

@function plus-col( $x, $y ) {
  $col-x: integral( $x ); $u-x: guttural( $x );
  $col-y: integral( $y ); $u-y: guttural( $y );
  $px: to-px-from-col( $col-x ) + to-px-from-col( $col-y );
  @if ( $col-x > 0 and $col-y > 0 ) { $px: $px + 10px; }
  @return to-col-from-px( $px + to-px-from-u($u-x) + to-px-from-u($u-y) );
}

/* `zero` returns 0 of the same type as `$amt` */
@function zero( $amt ) {
  @if is-number( $amt ) { @return $amt * 0; }
  @if is-string( $amt ) { @return ""; }
  @if is-list( $amt ) { @return (); }
}

/* `n` returns `$n` of the same type as `$amt` */
@function number( $amt, $n ) {
  @return zero( $amt ) + $n;
}

/* `one` returns 1 of the same type as `$amt` */
@function one( $amt ) {
  @return number( $amt, 1 );
}

@function integral( $amt ) {
  @return floor( $amt + 0.049999 );
}

@function fractional( $amt ) {
  @return $amt - integral( $amt );
}

/* `decimal` returns the first digit after the decimal */
@function decimal( $amt ) {
  @return round( fractional($amt) * 10 );
}

@function guttural( $col ) {
  @return decimal( $col ) * 1u / 1col;
}

// list operations //////////////////////////////////////////////////////////////////

@function first( $list ) {
  @return nth( $list, 1 );
}

@function second( $list ) {
  @return nth( $list, 2 );
}

@function last( $list ) {
  @return nth( $list, length($list) );
}

@function head ( $list ) {
  @return first( $list );
}

@function tail( $list ) {
  $result: ();
  @for $i from 2 through length( $list ) {
    $result: append( $result, nth( $list, $i ) );
  }
  @return $result;
}

@function maybe-nth( $list, $i ) {
  @if is-list( $list ) {
    @if length( $list ) < $i { @return (); }
    @return nth( $list, $i );
  }
  @return ();
}

@function maybe-first( $list ) {
  @return maybe-nth( $list, 1 );
}

@function maybe-second( $list ) {
  @return maybe-nth( $list, 2 );
}

@function sum( $list, $separator: zero( first($list) )) {
  $result: first( $list );
  @for $i from 2 through length( $list ) {
    $result: plus( plus($result, $separator), nth($list, $i) );
  }
  @return $result;
}

@function compact( $list ) {
  $result: ();
  @each $item in $list {
    @if not-empty( $item ) and not-blank( $item ) {
      $result: append( $result, $item );
    }
  }
  @return $result;
}

@function flatten( $values ) {
  $result: ();
  @each $value in $values {
    @if is-list( $value ) {
      @each $x in flatten( $value ) { $result: append( $result, $x ); }
    }
    @else {
      $result: append( $result, $value );
    }
  }
  @return $result;
}

// search //////////////////////////////////////////////////////////////////

@function contains-none( $items, $these ) {
  @return not contains-any( $items, $these );
}

@function contains-any( $items, $these ) {
  @each $item in $items {
    @if contains( $these, $item ) { @return true; }
  }
  @return false;
}

@function contains( $items, $this ) {
  @each $item in $items {
    @if $this == $item { @return true; }
  }
  @return false;
}

@function find-by-nth( $lists, $val, $i ) {
  @each $list in $lists {
    @if $val == nth( $list, $i ) { @return $list; }
  }
  @return ();
}

@function find-by-first( $pairs, $first ) {
  @return find-by-nth( $pairs, $first, 1 );
}

@function find-by-second( $pairs, $second ) {
  @return find-by-nth( $pairs, $second, 2 );
}

@function find-second-by-first( $pairs, $first ) {
  @return maybe-second( find-by-first( $pairs, $first ) );
}

@function find-first-by-second( $pairs, $second ) {
  @return maybe-first( find-by-second( $pairs, $second ) );
}

@function find-opposite( $pairs, $first-or-second ) {
  @return find-value(
    find-second-by-first( $pairs, $first-or-second )
    find-first-by-second( $pairs, $first-or-second )
  );
}

@function find-value( $possibilities ) {
  @each $possibility in $possibilities {
    @if is-value( $possibility ) { @return $possibility; }
  }
  @return ();
}

// enumeration //////////////////////////////////////////////////////////////////

//@function enum( $s1, $s2:(), $s3:(), $s4:(), $s5:() ) {
//  @return sum( enum1($s1) enum1($s2) enum1($s3) enum1($s4) enum1($s5) );
//}

@function enum( $series ) {
  @if not is-list( $series ) { @return $series; }
  @if length( $series ) < 3 or contains-none( $series, _ __ ) { @return $series; }

  $iN: nth( $series, length( $series ) );
  $op: nth( $series, 3 );
  $i2: nth( $series, 2 );
  $i1: nth( $series, 1 );
  $d: $i2 - $i1;
  $i: $i1;
  $result: ();
  @if $op == __ { $iN: minus( $iN, $d ); }
  @while $i <= $iN {
    $result: append( $result, $i );
    $i: plus( $i, $d );
  }
  @return $result;
}

// string operations //////////////////////////////////////////////////////////////////

@function dasherize( $list ) {
  @return sum( $list, "-" );
}

/* `format-unit` returns the formatted unit of `$amt` */
@function format-unit( $amt ) {
  $unit: unit( $amt );
  @if $unit == "%" { @return pc; }
  @return unquote( $unit );
}

/* `format-value` returns the `$val` formatted as text, with the unit as decimal point */
@function format-value( $val ) {
  @if is-number( $val ) { @return format-number( $val); }
  @if is-string( $val ) { @return format-string( $val); }
  @if is-color( $val ) { @return format-color( $val); }
  @return $val;
}

@function format-number( $num ) {
  @if is-zero( $num ) { @return 0; }
  $unit: format-unit( $num );
  $num: to-unitless( $num );
  $left: integral( $num );
  $right: decimal( $num );
  @if $right == 0 { $right: ""; @if $unit == u { $unit: ""; }}
  @else if $left == 0 { $left: ""; }
  @return #{ $left }#{ $unit }#{ $right };
}

@function format-string( $str ) {
  @if is-string( $str ) { @return abbreviate( $str ); }
}

@function format-color( $col ) {
  $name: color-name( $col );
  @if is-value( $name ) { @return $name; }
  $r: red( $col );
  $g: green( $col );
  $b: blue( $col );
  @if $r == $g and $g == $b { @return format-grey( $col ); }
  @return "color-" + format-hex2( $r ) + format-hex2( $g ) + format-hex2( $b );
}

@function format-grey( $col ) {
  @return "grey-" + format-hex2( red($col) );
}

@function format-hex2( $num ) {
  $h: format-hex( $num );
  @if $num < 15 { $h: "0" + $h; };
  @return $h;
}

@function format-hex( $num ) {
  @if $num > 15 {
    @return "" + format-hex(floor($num / 16)) + format-hex($num % 16);
  }
  @return hex-character( $num );
}

@function format-list( $list ) {
  @if is-empty( $list ) { @return ""; }
  $result: ();
  @for $i from 1 through length( $list ) {
    $result: append( $result, format-value( nth( $list, $i ) ) );
  }
  @return $result;
}

@function format( $list-or-val ) {
  @if is-list( $list-or-val ) { @return format-list( $list-or-val ); }
  @return format-value( $list-or-val );
}

// conversions //////////////////////////////////////////////////////////////////

@function class( $list ) {
  @return unquote( ".#{ dasherize( compact( format-list($list) ) )}" );
}

/* `to-unitless` returns the `$amt` without units */
@function to-unitless( $amt ) {
  @return $amt / one( $amt );
}

@function to-px( $num ) {
  @if is-col( $num ) { @return to-px-from-col( $num ); }
  @if is-u( $num )   { @return to-px-from-u( $num ); }
  @return $num;
}

@function to-px-from-col( $col ) {
  $n: to-unitless( $col );
  $d: decimal( $n );
  $n: integral( $n );
  @if $n < 1 { $d: $d + 1; }
  $n: ( $n * 40px ) - 10px + ( $d * 10px );
  @return round( $n );
}

@function to-px-from-u( $u ) {
  @return round( 10px * to-unitless($u) );
}

@function to-u( $num ) {
  @if is-col( $num ) { @return to-u-from-col( $num ); }
  @if is-px( $num )  { @return to-u-from-px( $num ); }
  @return $num;
}

@function to-u-from-col( $col ) {
  @return to-u-from-px( to-px-from-col($col) );
}

@function to-u-from-px( $px ) {
  @return 1u * $px / 10px;
}

@function to-col( $num ) {
  @if is-u( $num )  { @return to-col-from-u( $num ); }
  @if is-px( $num ) { @return to-col-from-px( $num ); }
  @return $num;
}

@function to-col-from-u( $u ) {
  @return to-col-from-px( to-px-from-u($u) );
}

@function to-col-from-px( $px ) {
  @if $px < 30px { $px: $px - 10; }
  $px: $px + 10;
  $i: floor( $px / 40px );
  $f: ( $px % 40 ) / 10px;
  @return 1col * ( $i + $f / 10 );
}

// value unpacking //////////////////////////////////////////////////////////////////

@function unpack-find( $item, $pairs ) {
  @if is-list( $item ) {
    $result: ();
    @each $i in enum( $item ) { $result: append( $result, unpack-find($i, $pairs) ); }
    @return flatten( $result );
  }
  @return either( find-second-by-first($pairs, $item), $item );
}

@function condense( $val ) {
  @if is-number( $val ) { @return condense-number( $val ); }
  @return $val;
}

@function condense-number( $num ) {
  @if is-col( $num ) or is-u( $num) { @return to-px( $num ); }
  @return $num;
}

@function condense-sides( $side ) {
  @return unpack-find( $side, $condensed-sides );
}

@function condense-corners( $corner ) {
  @return unpack-find( $corner, $condensed-corners );
}

@function condense-directions( $direction ) {
  @return unpack-find( $direction, $condensed-directions );
}

@function expand( $value ) {
  @if is-list( $value ) {
    $result: ();
    @each $x in enum($value) { $result: append( $result, expand($x) );}
    @return flatten( $result );
  }
  @return expand-values( $value );
}

@function expand-values( $value ) {
  @if is-number( $value ) { @return expand-numbers( $value ); }
  @return $value;
}

@function expand-numbers( $number ) {
  @if is-unitless( $number ) { @return $number; }
  @return expand-px( to-px($number) );
}

@function expand-px( $px ) {
  $col: to-col( $px );
  $expanded: $px to-u( $px );
  @if is-decimal( $col ) { $expanded: append( $expanded, $col ); }
  @return $expanded;
}

@function expand-sides( $side ) {
  @return unpack-find( $side, $expanded-sides );
}

@function expand-corners( $corner ) {
  @return unpack-find( $corner, $expanded-corners );
}

@function expand-directions( $direction ) {
  @return unpack-find( $direction, $expanded-directions );
}

// definition and extension //////////////////////////////////////////////////////////////////

@function is-defineable( $class ) {
  @return not contains( $defined-begin, $class );
}

@function is-extendable( $class ) {
  @return contains( $defined-end, $class );
}

@mixin begin-def( $class ) {
  $defined-begin: append( $defined-begin, $class );
}

@mixin end-def( $class ) {
  $defined-end: append( $defined-end, $class );
}
